package {{packageName}}

// link: https://github.com/eaglesakura/swagger-codegen-extensions


{{#models}}{{#model}}
{{#isEnum}}
import (
    "golang.org/x/xerrors"
)
    {{#allowableValues}}
        type {{classname}} string
        type {{classname}}Array []{{classname}}
        {{#values}}
            const {{classname}}_{{.}} = {{classname}}("{{.}}")
        {{/values}}
    {{/allowableValues}}

    func (it {{classname}})String() string {
        return string(it)
    }

    // Pattern for {{classname}}
    var {{classname}}Values []{{classname}} = []{{classname}}{
        {{#allowableValues}}{{#values}}
            {{classname}}_{{.}},
        {{/values}}{{/allowableValues}}
    }

    func (it *{{classname}})Valid() error {
        if it == nil {
            return xerrors.Errorf("{{classname}}(nil)")
        }
        switch string(*it) {
            {{#allowableValues}}{{#values}}
                case "{{.}}":
                    return nil
            {{/values}}{{/allowableValues}}
        }
        return xerrors.Errorf("invalid {{classname}}(%v)", string(*it))
    }

{{/isEnum}}
{{^isEnum}}

import (
    "encoding/json"
    "golang.org/x/xerrors"
    "net/http"
    "time"
)

{{#vars}}{{#isEnum}}
    {{#allowableValues}}
        type {{classname}}{{datatypeWithEnum}} string
        type {{classname}}{{datatypeWithEnum}}Array []{{classname}}{{datatypeWithEnum}}
        {{#values}}
            const {{classname}}{{datatypeWithEnum}}_{{.}} = {{classname}}{{datatypeWithEnum}}("{{.}}")
        {{/values}}
    {{/allowableValues}}

    func (it {{classname}}{{datatypeWithEnum}})String() string {
        return string(it)
    }

    // Pattern for {{classname}}{{datatypeWithEnum}}
    var {{classname}}{{datatypeWithEnum}}Values = []{{classname}}{{datatypeWithEnum}}{
        {{#allowableValues}}{{#values}}
            {{classname}}{{datatypeWithEnum}}_{{.}},
        {{/values}}{{/allowableValues}}
    }

    func (it *{{classname}}{{datatypeWithEnum}})Valid() error {
        if it == nil {
            return xerrors.Errorf("{{classname}}{{datatypeWithEnum}}(nil)")
        }
        switch *it {
            {{#allowableValues}}{{#values}}
                case {{classname}}{{datatypeWithEnum}}_{{.}}:
                    return nil
            {{/values}}{{/allowableValues}}
        }
        return xerrors.Errorf("invalid {{classname}}{{datatypeWithEnum}}(%v)", string(*it))
    }
{{/isEnum}}{{/vars}}

// {{{description}}}
// {{classname}} Interface for alternative definitions.
type I{{classname}} interface {
    // JsonCopy to result ptr.
    MarshalCopy(result interface{}) error

    // Marshal json string.
    Json() []byte

    {{#vars}}
        // Remove {{name}} property
        Remove{{name}}()

        // Get {{name}} property or default value.
        Get{{name}}() {{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}}

        // Get {{name}} property or panic().
        Require{{name}}() {{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}}

        // Set {{name}} property.
        Set{{name}}(new{{name}} {{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}})

    {{/vars}}
}

// {{{description}}}
type {{classname}} struct {
    {{#vars}}
        // {{{description}}}
        {{name}} *{{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"`
    {{/vars}}
}
type {{classname}}Array []{{classname}}

// Update self from builder callback.
func (it *{{classname}})Update(builder func(ref *{{classname}})) *{{classname}} {
    builder(it)
    return it
}

// Copy and Update self from builder callback.
func (it *{{classname}})Copy(builder func(copied *{{classname}})) *{{classname}} {
    result := *it
    builder(&result)
    return &result
}

// DeepCopy to result ptr.
func (it *{{classname}})MarshalCopy(result interface{}) error {
    body, _ := json.Marshal(it)
    err := json.Unmarshal(body, result)
    if err != nil {
        return xerrors.Errorf("{{classname}}.MarshalCopy failed, to='%v': %w", result, err)
    }
    return nil
}

{{#vars}}
// Remove {{name}}
func (it *{{classname}})Remove{{name}}() {
    it.{{name}} = nil
}

// Set {{name}}
func (it *{{classname}})Set{{name}}(new{{name}} {{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}}) {
    it.{{name}} = &new{{name}}
}

// Require value of {{name}}
func (it *{{classname}})Require{{name}}() {{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}} {
    if it.{{name}} == nil {
        panic(xerrors.Errorf("{{classname}}.{{name}} is nil"))
    }
    return *it.{{name}}
}

// Get value of {{name}} / or default
func (it *{{classname}})Get{{name}}() {{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}} {
    if it.{{name}} != nil {
        return *it.{{name}}
    }
    result := new({{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}})
    return *result
}
{{/vars}}

// encode to json
func (it {{classname}})String() string {
    buf, _ := json.Marshal(it)
    return string(buf)
}
func (it *{{classname}})Json() []byte {
    buf, _ := json.Marshal(it)
    return buf
}

func (it *{{classname}}) Write(writer http.ResponseWriter, request *http.Request) {
    header := writer.Header()
    buf, _ := json.Marshal(it)

    header.Set("Content-Type", "application/json")
    writer.WriteHeader(http.StatusOK)
    _, _ = writer.Write(buf)
}

func (it *{{classname}}) Valid() error {
    {{#vars}}
        {{#required}}
            if it.{{name}} == nil {
                return xerrors.Errorf("'{{classname}}.{{name}}' is required")
            }
        {{/required}}
        {{#pattern}}
        // TODO: pattern check / "{{pattern}}"
        {{/pattern}}
        {{#minLength}}
            if it.{{name}} != nil && len(*it.{{name}}) < {{minLength}} {
                return xerrors.Errorf("'{{classname}}.{{name}}' invalid length(min >= {{minLength}})")
            }
        {{/minLength}}
        {{#maxLength}}
            if it.{{name}} != nil && len(*it.{{name}}) > {{maxLength}} {
                return xerrors.Errorf("'{{classname}}.{{name}}' invalid length(max >= {{maxLength}})")
            }
        {{/maxLength}}
        if it.{{name}} != nil {
            if err := validationValue(it.{{name}}); err != nil {
                return xerrors.Errorf("'{{classname}}.{{name}}' validation error: %w", err)
            }
        }
    {{/vars}}

    return nil
}

func (it {{classname}}Array) Write(writer http.ResponseWriter, request *http.Request) {
    buf, _ := json.Marshal(it)
    _, _ = writer.Write(buf)
}

func (it {{classname}}Array) Json() []byte {
    buf, _ := json.Marshal(it)
    return buf
}

func (it *{{classname}})compilerDummy() {
    time.Now()
    _ = xerrors.Errorf("")

    var model {{classname}}
    var iModel I{{classname}} = &model
    var swaggerModelRef swaggerModel = &model
    var swaggerResponseRef SwaggerResponse = &model
    var swaggerValidatableRef swaggerValidatable = &model

    var modelArray {{classname}}Array
    swaggerResponseRef = modelArray

    iModel = iModel
    swaggerModelRef = swaggerModelRef
    swaggerResponseRef = swaggerResponseRef
    swaggerValidatableRef = swaggerValidatableRef
}

{{/isEnum}}
{{/model}}{{/models}}


