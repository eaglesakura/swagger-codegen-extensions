package {{packageName}}

// link: https://github.com/eaglesakura/swagger-codegen-extensions

import (
	"encoding/json"
	"fmt"
	"github.com/go-chi/chi/v5"
	"golang.org/x/xerrors"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
    "path"
	"strings"
)
type {{classname}}Controller struct {
    router chi.Router

	// Custom response write handler.
	Responder func(writer http.ResponseWriter, request *http.Request, handlerResponse SwaggerResponse, handlerError error)
}

{{#operations}}{{#operation}}
    // parse {{classname}}{{operationIdCamelCase}}Request object from http.Request
    func Parse{{classname}}{{operationIdCamelCase}}Request(request *http.Request) (*{{classname}}{{operationIdCamelCase}}Request, error) {
        result := &{{classname}}{{operationIdCamelCase}}Request{
        }

        queryValues := request.URL.Query()
        headerValues := request.Header

        {{#pathParams}}
            convertValue(chi.URLParam(request, "{{baseName}}"), &result.{{paramName}})
        {{/pathParams}}

        {{#queryParams}}
            _ = parseValues(queryValues, "{{baseName}}", &result.{{paramName}})
        {{/queryParams}}

        {{#headerParams}}
            _ = parseValues(headerValues, "{{baseName}}", &result.{{paramName}})
        {{/headerParams}}

        {{#bodyParam}}
            if body, err := ioutil.ReadAll(request.Body); err != nil {
                return nil, xerrors.Errorf("Request body read failed, %w", err)
            } else {
                var model {{{dataType}}}
                err = json.Unmarshal(body, &model)
                if err != nil {
                    return nil, xerrors.Errorf("Request body parse failed, %w", err)
                }
                result.{{paramName}} = &model
            }
        {{/bodyParam}}

        // dummy access for Compiler
        //noinspection GoSelfAssignment
        devNull(queryValues)
        //noinspection GoSelfAssignment
        devNull(headerValues)

        return result, nil
    }

    // Register handler to Router.
    // {{{summary}}}
    // {{{descripotion}}}
    // {{{notes}}}
    func (it *{{classname}}Controller)Handle{{{nickname}}}(handler func(httpRequest *http.Request, swaggerRequest *{{classname}}{{operationIdCamelCase}}Request) (response SwaggerResponse, err error)) {
        r := it.router
        r.{{httpMethod}}(path.Join("{{basePathWithoutHost}}", "{{path}}"), func(writer http.ResponseWriter, request *http.Request) {
            var response SwaggerResponse
            var responseError error
            defer func() {
                recoverError := recover()
                if err, ok := recoverError.(error); ok {
                    responseError = err
                }

                it.Responder(writer, request, response, responseError)
            }()

            params, err := Parse{{classname}}{{operationIdCamelCase}}Request(request)
            if err != nil {
                responseError = err
            } else {
                response, responseError = handler(request, params)
            }
        })
    }
{{/operation}}{{/operations}}

// make controller.
//
//
// e.g.) How to use on HttpServer.
//  router := chi.NewRouter()
//  controller := {{packageName}}.New{{classname}}Controller(router)
//  controller.Handlers.HandlePathToFooApi(func(req, params) (SwaggerResponse, error) {
//      // Handle Foo API.
//  })
//  controller.Handlers.HandlePathToBarApi(func(req, params) (SwaggerResponse, error) {
//      // Handle Bar API.
//  })
//  http.Handle("/", router)
//
// e.g.) How to use on Google Cloud Functions
//  func FooCloudFunction(writer http.ResponseWriter, request *http.Request) {
//      router.ServeHTTP(writer, request)
//  }
func New{{classname}}Controller(router chi.Router) *{{classname}}Controller {
    return &{{classname}}Controller {
        router: router,
		Responder: func(writer http.ResponseWriter, request *http.Request, handlerResponse SwaggerResponse, handlerError error) {
			if handlerError != nil {
				writer.WriteHeader(http.StatusInternalServerError)
				_, _ = writer.Write([]byte(handlerError.Error()))
				return
			}

			if handlerResponse != nil {
				handlerResponse.Write(writer, request)
				return
			}

			writer.WriteHeader(http.StatusNoContent)
		},
    }
}


//noinspection GoUnusedFunction,GoSnakeCaseUsage
func _{{classname}}_this_is_call_dummy() {
	_, _ = ioutil.ReadAll(nil)
	_, _ = url.Parse("")
	_ = xerrors.Errorf("")
	strings.ToUpper("")
	_ = fmt.Sprintf("%v", "")
	_, _ = io.ReadAtLeast(nil, nil, 0)
	a := ""
	_ = json.Unmarshal(nil, &a)
}