package {{packageName}}

// generated by lightweight-swagger-codegen@eaglesakura

{{#models}}
{{#model}}
{{#isEnum}}
{{#allowableValues}}
type {{classname}} string
type {{classname}}Array []{{classname}}
{{#values}}
const {{classname}}_{{.}} {{classname}} = {{classname}}("{{.}}")
{{/values}}{{/allowableValues}}
func (it {{classname}})Ptr() *{{classname}} {
    return &it
}
func (it {{classname}})StringPtr() *string {
    temp := string(it)
    return &temp
}
func (it *{{classname}})Value() {{classname}} {
    return *it
}

func (it *{{classname}})StringValue() string {
    return string(*it)
}
func (it {{classname}}Array)Ptr() *{{classname}}Array {
    return &it
}


// Exist Patterns
var {{classname}}Pattern []string = []string{
{{#allowableValues}}{{#values}}
    "{{.}}", {{/values}}
{{/allowableValues}}
}
func (it *{{classname}})Valid(pattern []string) bool {
    if it == nil {
        return false
    }
    value := string(*it)
    for _, v := range pattern {
        if v == value {
            return true
        }
    }
    return false
}

{{/isEnum}}

{{^isEnum}}

import (
    "net/http"
    "encoding/json"
    "github.com/eaglesakura/swagger-go-core"
)

{{#vars}}{{#isEnum}}
type {{classname}}{{datatypeWithEnum}} string
type {{classname}}{{datatypeWithEnum}}Array []{{classname}}{{datatypeWithEnum}}
{{#allowableValues}}{{#values}}
const {{classname}}{{datatypeWithEnum}}_{{.}} {{classname}}{{datatypeWithEnum}} = {{classname}}{{datatypeWithEnum}}("{{.}}"){{/values}}
{{/allowableValues}}
var {{classname}}{{datatypeWithEnum}}Pattern []string = []string{
{{#allowableValues}}{{#values}}
    "{{.}}", {{/values}}
{{/allowableValues}}
}
func (it {{classname}}{{datatypeWithEnum}})Ptr() *{{classname}}{{datatypeWithEnum}} {
    return &it
}
func (it *{{classname}}{{datatypeWithEnum}})Value() {{classname}}{{datatypeWithEnum}} {
    return *it
}
func (it *{{classname}}{{datatypeWithEnum}})Valid(pattern []string) bool {
    if it == nil {
        return false
    }
    value := string(*it)
    for _, v := range pattern {
        if v == value {
            return true
        }
    }
    return false
}
{{/isEnum}}{{/vars}}

// {{{description}}}
type {{classname}} struct {
{{#vars}}{{#description}}
	// {{{description}}}{{/description}}
	{{name}} *{{#isEnum}}{{classname}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"`
{{/vars}}
}

// encode to json
func (it {{classname}})String() string {
    buf, _ := json.Marshal(it)
    return string(buf)
}

type {{classname}}Array []{{classname}}

func (it *{{classname}}) Valid(factory swagger.ValidatorFactory) bool {
    {{#vars}}
    if(!factory.NewValidator(it.{{name}}, it.{{name}} == nil).
                {{#required}}Required(true).{{/required}}
                {{#pattern}}Pattern("{{pattern}}").{{/pattern}}{{#minLength}}MinLength({{minLength}}).{{/minLength}}{{#maxLength}}MinLength({{maxLength}}).{{/maxLength}}
                {{#isEnum}}EnumPattern({{classname}}{{datatypeWithEnum}}Pattern).{{/isEnum}}
                Valid(factory)) {
        return false
    }
    {{/vars}}

    return true
}

func (it *{{classname}}) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil  {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *{{classname}}Array) Valid(factory swagger.ValidatorFactory) bool {
    for _, it := range *arr {
    {{#vars}}
        if(!factory.NewValidator(it.{{name}}, it.{{name}} == nil).
        {{#required}}Required(true).{{/required}}
        {{#pattern}}Pattern("{{pattern}}").{{/pattern}}{{#minLength}}MinLength({{minLength}}).{{/minLength}}{{#maxLength}}MinLength({{maxLength}}).{{/maxLength}}
        {{#isEnum}}EnumPattern({{classname}}{{datatypeWithEnum}}Pattern).{{/isEnum}}
        Valid(factory)) {
        return false
        }
    {{/vars}}
    }
    return true
}

func (it *{{classname}}Array) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
    writer.WriteHeader(200)
    if err := producer.Produce(writer, it); err != nil  {
        panic(err) // let the recovery middleware deal with this
    }
}

{{/isEnum}}
{{/model}}{{/models}}
