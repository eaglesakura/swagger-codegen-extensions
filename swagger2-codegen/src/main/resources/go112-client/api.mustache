package {{packageName}}

// link: https://github.com/eaglesakura/swagger-codegen-extensions

import (
    "fmt"
    "io"
    "net/url"
    "strings"
    "github.com/eaglesakura/swagger-go-core"
    "github.com/eaglesakura/swagger-go-core/errors"
    "github.com/eaglesakura/swagger-go-core/utils"
)


{{#operations}}
const {{classname}}_BasePath string = "{{basePathWithoutHost}}"
type {{classname}} struct {
    BasePath string
}


func New{{classname}}() *{{classname}} {
    return &{{classname}}{
        BasePath:{{classname}}_BasePath,
    }
}

    {{#operation}}
        /*
        {{summary}}
        {{notes}}
        */
        type {{classname}}{{operationIdCamelCase}}Request struct {
        {{#allParams}}
            /*
            {{description}}
            */
            {{paramName}}   *{{{dataType}}}

        {{/allParams}}
        }

        /*
        {{summary}}
        {{notes}}

          result: {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
        */
        func (it *{{classname}}){{nickname}}(_client swagger.FetchClient, _request *{{classname}}{{operationIdCamelCase}}Request, result {{#returnType}}*{{{returnType}}}{{/returnType}}{{^returnType}}interface{} {{/returnType}}) error {
        {{#allParams}}
            if(!_client.NewValidator(_request.{{paramName}}, _request.{{paramName}} == nil).{{#required}}Required(true).{{/required}}{{#pattern}}Pattern("{{pattern}}").{{/pattern}}{{#minLength}}MinLength({{minLength}}).{{/minLength}}{{#maxLength}}MaxLength({{maxLength}}).{{/maxLength}}Valid(_client)) {
                return errors.New(0, "Missing the required parameter '{{paramName}}' when calling {{nickname}}")
            }
        {{/allParams}}

        // create path and map variables
        {
            localVarPath := strings.Replace("{{path}}","{format}","json", -1)
            {{#pathParams}}
                localVarPath = strings.Replace(localVarPath, "{" + "{{baseName}}" + "}", utils.EscapeString(fmt.Sprintf("%v", *_request.{{{paramName}}})), -1)
            {{/pathParams}}
            _client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
            _client.SetMethod(strings.ToUpper("{{httpMethod}}"))
        }

        {{#queryParams}}
            if _request.{{paramName}} != nil {
                _client.AddQueryParam("{{baseName}}", utils.ParameterToString(_request.{{paramName}}))
            }
        {{/queryParams}}

        {{#headerParams}}
            if _request.{{paramName}} != nil {
                _client.AddHeader("{{baseName}}", utils.ParameterToString(_request.{{paramName}}))
            }
        {{/headerParams}}

        localVarFormParams := url.Values{}
        formEnable := false
        {{#formParams}}{{#notFile}}
            // form params
            formEnable = true
            if _request.{{paramName}} != nil {
                localVarFormParams.Add("{{baseName}}", utils.ParameterToString(_request.{{paramName}}))
            }
        {{/notFile}}{{/formParams}}

        if formEnable {
            _client.SetPayload(utils.NewFormPayload(localVarFormParams))
        }

        {{#bodyParam}}
            if _request.{{paramName}} != nil {
                _client.SetPayload(utils.NewJsonPayload(_request.{{paramName}}))
            }
        {{/bodyParam}}

            return _client.Fetch(result)
        }
    {{/operation}}
{{/operations}}


func (it *{{classname}})this_is_call_dummy() {
    v := url.Values{}
    v.Add("Key", "Value")

    errors.New(0, "stub")
    strings.ToUpper("")
    fmt.Sprintf("%v", "")
    io.ReadAtLeast(nil, nil, 0)
}
